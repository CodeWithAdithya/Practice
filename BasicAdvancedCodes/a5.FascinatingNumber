/* Write a program to print fascinating number */

Note: A fascinating number is one which when multiplied by 2 and 3, and then, after the 
results are concatenated with the original number, the new number contains all the digits 
from 1 to 9 exactly once.
Example: 327 is the number
 = 327X2 = 654
 = 327X3 = 981
Concatenating the results and the given number.
“327” + “654” + “981” = 327654981
All the numbers from 1 to 9 appears only once.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class JavaConqueror {
    public static void main(String[] args) {
        int number = 327;
        System.out.println(fascinatingNumber(number));
    }

    static boolean fascinatingNumber(int number) {
        int secondNumber = number * 2;
        int thirdNumber = number * 3;
        String result = "" + number + secondNumber + thirdNumber;
        char[] ch = result.toCharArray();
        boolean[] seen = new boolean[10]; // Array to keep track of digits from 0 to 9

        for (int i = 0; i < ch.length; i++) {
            int digit = ch[i] - '0';
            if (digit == 0 || seen[digit]) {
                return false; // If the digit is '0' or already seen, it's not fascinating
            }
            seen[digit] = true;
        }

        return true;
    }
}
Output:
true

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


public class Practise
{
    public static void main(String[] args)
    {
      int num = 327;
        System.out.println(fasinatingNum(num));
    }
    static boolean fasinatingNum(int num)
    {
        int secNum = num*2,thirdNum=num*3;
        String fullNum=""+num+secNum+thirdNum;
        for (int i = 0; i < fullNum.length(); i++)
        {
            for (int j = i+1; j <fullNum.length() ; j++)
            {
             if (fullNum.charAt(i)-'0'==fullNum.charAt(j)-'0')
             {
                 return false;
             }
            }
        }
        return true;
    }
}

Output:
true
