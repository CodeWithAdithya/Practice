/* Write a program to print Keith number */

Note:
▪ A positive n digit number X is called a Keith number (or repfigit number) if it is 
arranged in a special number sequence generated using its digits. The special sequence 
has first n terms as digits of x and other terms are recursively evaluated as the sum of 
previous n terms. For example, 197, 19, 742, 1537, etc.
▪ Let's check the number 742 is a Keith number or not.
▪ First, we will separate each digit, as 7, 4, 2
▪ To find the next term of the above-created series, we add these digits (i.e. 7+4+2), and the 
resultant (13) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13
▪ To find the next term of the above series, we add the last three terms (i.e. 13+2+4), and the 
resultant (19) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19
▪ To find the next term of the above series, we add the last three terms (i.e. 19+13+2), and 
the resultant (34) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34
▪ To find the next term of the above series, we add the last three terms (i.e. 34+19+13), and 
the resultant (66) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34, 66
▪ To find the next term of the above series, we add the last three terms (i.e. 66+34+19), and 
the resultant (119) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34, 66, 119
▪ To find the next term of the above series, we add the last three terms (i.e. 119+66+34), and 
the resultant (219) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34, 66, 119, 219
▪ To find the next term of the above series, we add the last three terms (i.e. 219+119+66), 
and the resultant (404) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34, 66, 119, 219, 404
▪ To find the next term of the above series, we add the last three terms (i.e. 404+219+119), 
and the resultant (742) that we get becomes the next term of the series.
▪ Now, the series becomes, 7, 4, 2, 13, 19, 34, 66, 119, 219, 404, 742
▪ Here, we will stop the process because we get the same number (742) as a term of the 
series. Hence, the given number 742 is a Keith number.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


public class JavaConqueror {
    public static void main(String[] args) {
        int number = 251133297;
        if (isKeithNumber(number)) {
            System.out.println(number + " is a Keith number");
        } else {
            System.out.println(number + " is not a Keith number");
        }
    }

    static boolean isKeithNumber(int number) {
        int tempNumber = number;
        String strNum = Integer.toString(number);
        int countDigits = strNum.length();
        int limit = 10000, nextNumber = 0, i;
        int[] sequence = new int[limit];

        for (i = countDigits - 1; i >= 0; i--) {
            sequence[i] = number % 10;
            number = number / 10;
        }

        i = countDigits;
        while (nextNumber < tempNumber) {
            nextNumber = 0;
            for (int j = 1; j <= countDigits; j++) {
                nextNumber += sequence[i - j];
            }
            sequence[i] = nextNumber;
            i++;

            if (nextNumber == tempNumber) {
                return true;
            }
        }

        return false;
    }
}
Output : 
251133297 is a Keith number

---------------------------------------------------------------------------------------------------------------------------------------------------------------


public class PractiseNow {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter first Number");
        int num = sc.nextInt();
        System.out.println(keithNum(num));
    }
    static boolean keithNum(int num)
    {
        ArrayList<Integer> list = new ArrayList<>();
        int sum=0;
       String strNum = Integer.toString(num);
       char[] ch = strNum.toCharArray();
        for (int i = 0; i < strNum.length(); i++)
        {
            list.add(ch[i]-'0');
         sum = sum+ ch[i]-'0';
        }
        list.add(sum);
        int nextNum=0;
        while (nextNum<num)
        {
            int n = strNum.length();
            nextNum=0;
            for (int i = 1; i <= n; i++)
            {
             nextNum = nextNum + list.get(list.size()-i);
            }
            if (nextNum==num)
            {
                return true;
            }
            list.add(nextNum);
        }
      return false;
    }
}

Output : 
Enter first Number
742
true

----------------------------------------------------------------------------------------------------------------------------------------------------

public class Practise {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the 1st Number");
        int num = sc.nextInt();
        System.out.println(keithNum(num));
    }
      static boolean keithNum(int num)
      {
       String strNum = Integer.toString(num);
       List<Integer> list = new ArrayList<>();
       int nextNum=0;
          for (int i = 0; i < strNum.length(); i++)
          {
              list.add(strNum.charAt(i)-'0');
              nextNum = nextNum + strNum.charAt(i) - '0';

          }
          list.add(nextNum);
          for (int i = strNum.length(); i <= 10000; i++)
          {
              if (num == nextNum)
              {
                  return true;
              }
              nextNum = list.get(i)+ list.get(i-1)+list.get(i-2);
              list.add(nextNum);
          }
         return false;
      }
}

------------------------------------------------------------------------------------------------------------------------------------------------------

public class Practise
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Any Num");
        int num  = sc.nextInt();
        keithNum(num);
    }
    static void keithNum(int num)
    {
        int sum=0;

        String strNum = Integer.toString(num);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < strNum.length(); i++)
        {
         list.add(strNum.charAt(i)-'0');
            System.out.print(strNum.charAt(i)-'0'+" ");
        }
        while (sum!=num)
        {
            if (list.size()>100)
            {
                System.out.println();
                System.out.println("Checked Upto 100 numbers, till now not found keith Num");
                return;
            }
            sum = 0;
            for (int i = list.size() - 1; i >= list.size() - 3; i--)
            {
                sum = sum + list.get(i);
            }
            list.add(sum);
            System.out.print(sum + " ");
        }
        if (sum==num)
        {
            System.out.println();
            System.out.println(sum+" is a KEITH NUM");
        }

    }
}

output: 

Enter Any Num
742
7 4 2 13 19 34 66 119 219 404 742 
742 is a KEITH NUM

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(Most Efficient)

public class Practise
{
    public static void main(String[] args)
    {
      int num = 742;
        System.out.println(keithNum(num));
    }
    static boolean keithNum(int num)
    {
       String strNum = Integer.toString(num);
       int first = Integer.parseInt(strNum.substring(0,1));
       int second = Integer.parseInt(strNum.substring(1,2));
       int third = Integer.parseInt(strNum.substring(2,3));
       int result = 0,count=0;
       while (result!=num)
       {
           result =   first+second+third;
           if (result==num)
           {
               return true;
           }
           if (result>num)
           {
            return false;
           }
           first = second;
           second = third;
           third = result;
           count++;
       }
       return false;
    }
}

Output:
true;
