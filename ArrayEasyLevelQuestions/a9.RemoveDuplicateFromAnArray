/* write a program to remove duplicates from an Array */

Basically there are three methods to remove duplicate from an array :

1. Use two for loops i and j itereate through each element from an Array.
2. Sort the array and use two pointers for two indexes and check for duplicates if found remove the duplicates and increment the two pointers by 1.
3. use Set to remove duplicates.

from the above three methods third method is most time efficient and space efficient

----------------------------------------------------------------------------------------------------------------------------------------------------------------------


import java.util.*;

public class JavaConqueror
{
    public static void main(String[] args)
    {
       int[] nums = {2,3,4,1,3,2,1,4,5,4,3,5,3,6,7};
        System.out.println(Arrays.toString(dublicate(nums)));
    }
    static int[] dublicate(int[] nums)
    {
        Set<Integer> uniqueElements = new LinkedHashSet<>();
        for (int i = 0; i < nums.length; i++)
        {
         uniqueElements.add(nums[i]);
        }
        int[] uniqueArray = new int[uniqueElements.size()];
        int index = 0;
        for (int num: uniqueElements)
        {
         uniqueArray[index] = num;
         index++;
        }
        return uniqueArray;
    }
}

Output:
[2, 3, 4, 1, 5, 6, 7]

--------------------------------------------------------------------------------------------------------------------------------------------------------------

//SORT THE ARRAY WITH THE HELP OF TWO POINTERS REMOVE DUPLICATES//

public class PractiseNow
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of Array");
        int size = sc.nextInt();
        int[] arr = new int[size];
        System.out.println("Enter Array Elements");
        for (int i = 0; i < size; i++)
        {
            arr[i]= sc.nextInt();
        }
        System.out.println(RemoveDuplicates(arr));
    }
    static ArrayList RemoveDuplicates(int[] arr)
    {
        if (arr==null || arr.length==0)
        {
            return new ArrayList<>(){{add(-1);add(-1);}};
        }
        ArrayList<Integer> list = new ArrayList<>();
        sort(arr);
        int slowPointer=0, fastPointer=1;
        while (fastPointer< arr.length)
        {
            if (arr[slowPointer]!=arr[fastPointer])
            {
                list.add(arr[slowPointer]);
            }
                slowPointer++;
               fastPointer++;
        }
        list.add(arr[slowPointer]);
        return list;
    }
    static int[] sort(int[] arr)
    {
        if (arr==null || arr.length==0)
        {
            return new int[]{-1,-1};
        }
        for (int i = 0; i < arr.length; i++)
        {
            for (int j = 1; j < arr.length ; j++)
            {
             if (arr[j-1]>arr[j])
             {
                 int temp = arr[j-1];
                 arr[j-1] = arr[j];
                 arr[j] = temp;
             }
            }
        }
        return arr;
    }
}

Output : 

Enter the size of Array
7
Enter Array Elements
1
2
2
3
4
4
5
[1, 2, 3, 4, 5]


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

// WITHOUT SORTING ARRAY REMOVE DUPLICATES//

public class PractiseNow
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of Array");
        int size = sc.nextInt();
        int[] arr = new int[size];
        System.out.println("Enter Array Elements");
        for (int i = 0; i < size; i++)
        {
            arr[i]= sc.nextInt();
        }
        System.out.println(RemoveDuplicates(arr));
    }
    static ArrayList RemoveDuplicates(int[] arr)
    {
     if(arr == null || arr.length == 0)
     {
         return new ArrayList<>(){{add(-1);add(-1);}};
     }
     ArrayList<Integer> list = new ArrayList<>();
     int slowPointer = 0, fastPointer = 1;
     while (slowPointer<arr.length && fastPointer<arr.length)
     {
         if (arr[slowPointer]!=arr[fastPointer])
         {
             if (fastPointer==arr.length-1)
             {
                 list.add(arr[slowPointer]);
                 slowPointer++;
                 fastPointer = slowPointer;
             }
             fastPointer++;
         }
         else if (arr[slowPointer]==arr[fastPointer])
         {
             slowPointer++;
             fastPointer = slowPointer+1;
         }
     }
        list.add(arr[arr.length-1]);
     return list;
    }
}

Output : 

Enter the size of Array
9
Enter Array Elements
1
6
7
6
8
7
1
8
4
[6, 7, 1, 8, 4]

------------------------------------------------------------------------------------------------------------------------------------------------------------

This solution is most optimal in time and space complexities 
Note: This is only for Sorted Arrays.


public class Practise {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the Length of the Array");
        int arrLength = sc.nextInt();
        int[] arr = new int[arrLength];
        System.out.println("Enter the Array Elements");
        for (int i = 0; i < arrLength; i++)
        {
         arr[i] = sc.nextInt();
        }
        int newLength = removeDuplicates(arr);
        System.out.println(Arrays.toString(Arrays.copyOf(arr,newLength)));
    }
    static int removeDuplicates(int[] arr)
    {
       int firstPointer=0;
       int secondPointer = firstPointer+1;
        while (secondPointer< arr.length)
        {
         if (arr[firstPointer]==arr[secondPointer])
         {
             secondPointer++;
         }
         else if (arr[firstPointer]!=arr[secondPointer])
         {
             firstPointer++;
             arr[firstPointer]=arr[secondPointer];
         }
        }
        return firstPointer+1;
    }
}
Output : 

Enter the Length of the Array
6
Enter the Array Elements
5
5
9
9
12
13
[5, 9, 12, 13]

