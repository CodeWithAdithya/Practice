/* Sort 0's, 1's and 2's With Optimal Solution */

-> The Optimal Solution is Possible Through "Dutch National Flag Algorithm".

  Dutch National Flag (DNF) - It is a programming problem proposed by Edsger Dijkstra.
  The flag of the Netherlands consists of three colors: white, red, and blue.
  The task is to randomly arrange balls of white, red, and blue in such a way that balls of the same color are placed together.
  For DNF (Dutch National Flag), we sort an array of 0, 1, and 2's in linear time that does not consume any extra space.
  We have to keep in mind that this algorithm can be implemented only on an array that has three unique elements.

    The Algorithm goes like 
      with three pointers they are 
      1. low=0
      2. mid=0
      3. high=arr.length-1;

    conditions: 
    1.  [0....low-1] ------------>  All 0's--------->Extreme Left.
    2.  [low...high-1]----------->  All 1's---------> Middle.
    3.  [high+1...arr.length-1] ->  All 2's---------> Extreme Right

    Approach to Sort:
    1.arr[mid] == 0 ---> swap(arr[low],arr[mid]);
                         low++;
                         mid++;

    2.arr[mid] == 1 ----> mid++;

    3.arr[mid] == 2 ----> swap(arr[mid],arr[high]);
                          high--;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class Practise
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("ENTER THE SIZE OF AN ARRAY");
        int size = sc.nextInt();
        int[] arr = new int[size];
        System.out.println("ENTER ARRAY ELEMENTS");
        for (int i = 0; i < arr.length; i++)
        {
         arr[i] = sc.nextInt();
        }
        System.out.println(Arrays.toString(dutchNationalFlagAlgorithm(arr)));
    }
    static int[] dutchNationalFlagAlgorithm(int[] arr)
    {
        if (arr==null || arr.length==0)
        {
            return new int[]{-1,-1};
        }
        int low=0,mid=0,high= arr.length-1;
        while (mid<=high)
        {
            if (arr[mid]==0)
            {
                swap(arr,low,mid);
                low++;
                mid++;
            }
            else if (arr[mid]==1)
            {
                mid++;
            }
            else
            {
                swap(arr,mid,high);
                high--;
            }
        }
        return arr;
    }
    static void swap(int[] arr,int first,int second)
    {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}

Output : 

ENTER THE SIZE OF AN ARRAY
8
ENTER ARRAY ELEMENTS
2
1
0
1
2
0
1
2
[0, 0, 1, 1, 1, 2, 2, 2]

    
