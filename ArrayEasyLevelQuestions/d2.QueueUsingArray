/* Implement a queue using an array */

public class CustomQueue
{
    protected int[] data;
    private static final int DEFAULT_SIZE = 10;
    int end = 0;
    public CustomQueue()
    {
        this(DEFAULT_SIZE);
    }
    public CustomQueue(int size)
    {
        this.data=new int[size];
    }
    private boolean isFull()
    {
        return end==data.length;  // ptr is at the last index
    }
    private boolean isEmpty()
    {
        return end==0;
    }
    public boolean add(int item)
    {
        if (isFull())
        {
            int[] temp = new int[data.length*2];
            for (int i = 0; i < data.length; i++)
            {
                temp[i]=data[i];
            }
            data=temp;
        }
        data[end++]=item;
        return true;
    }
    public int remove() throws Exception
    {
        if (isEmpty())
        {
            throw new Exception("Queue is Empty");
        }
        int removed = data[0];
        for (int i = 1; i <end ; i++)
        {
         data[i-1]=data[i];
        }
        end--;
        return removed;
    }
    public int peek() throws Exception
    {
        if (isEmpty())
        {
            throw new Exception("Queue is Empty");
        }
        return data[0];
    }
    public void display()
    {
        for (int i = 0; i < end; i++)
        {
            System.out.print(data[i]+" ");
        }
        System.out.println("END");
    }

    public static void main(String[] args) throws Exception {
        CustomQueue queue = new CustomQueue(5);
        queue.add(5);
        queue.add(9);
        queue.add(78);
        queue.add(34);
        queue.add(45);
        queue.add(55);
        queue.add(559);
        queue.display();
        System.out.println(queue.remove());
        queue.display();
    }
}
Output:

5 9 78 34 45 55 559 END
5
9 78 34 45 55 559 END


---------------------------------------------------------------------------------------------------------------------------------------------------------------

public class CustomStack
{
    int size = 10;
    int[] arr = new int[size];
    int pointer = 0;
    public boolean isFull()
    {
        if (pointer== arr.length)
        {
           return true;
        }
        return false;
    }
    public boolean isEmpty()
    {
        if (pointer==0)
        {
            return true;
        }
        return false;
    }
    public void add(int item)
    {
        if (isFull())
        {
            int[] temp = new int[size*2];
            for (int i = 0; i < arr.length; i++)
            {
             temp[i] = arr[i];
            }
            arr = temp;
        }
        arr[pointer]=item;
        pointer++;
    }
    public int remove()
    {
        if (isEmpty())
        {
            System.out.println("QUEUE IS EMPTY");
        }
        int remove = arr[0];
        for (int i = 1; i <pointer ; i++)
        {
         arr[i-1] = arr[i];
        }
        pointer--;
        return remove;
    }
   public void display()
   {
       for (int i = 0; i < pointer; i++)
       {
           System.out.print(arr[i]+" <- ");
       }
       System.out.println("END");
   }

    public static void main(String[] args)
    {
     CustomStack queue = new CustomStack();
        queue.add(134);
        queue.add(234);
        queue.add(334);
        queue.add(434);
        queue.add(534);
        queue.add(634);
        queue.add(734);
        queue.add(834);
        queue.display();
        System.out.println(queue.remove());
        queue.display();
    }
}

Output : 

134 <- 234 <- 334 <- 434 <- 534 <- 634 <- 734 <- 834 <- END
134
234 <- 334 <- 434 <- 534 <- 634 <- 734 <- 834 <- END
