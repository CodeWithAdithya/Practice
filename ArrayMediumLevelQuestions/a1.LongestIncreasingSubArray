*/ Find the longest increasing subarray /*

A subarray is a contiguous part of an array. The longest increasing subarray refers to the longest contiguous subarray
within an array where the elements are arranged in increasing order.
In other words, the elements in the subarray are in ascending order from left to right.

For example, consider the array [3, 4, 5, 1, 2, 3, 4, 5, 6]. The longest increasing subarray in this case is [1, 2, 3, 4, 5, 6], which has a length of 6.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class LongestSubArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the Length of the Array");
        int length = sc.nextInt();
        int[] arr = new int[length];
        System.out.println("Enter each value");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }
        int[] longestSubArray = findLongestSubArray(arr);
        System.out.println("Longest increasing subarray: " + Arrays.toString(longestSubArray));
    }

    static int[] findLongestSubArray(int[] arr) {
        if (arr == null || arr.length == 0) {
            return new int[]{-1};
        }
        int start = 0;
        int end = 0;
        int longestStart = 0;
        int longestEnd = 0;

        for (int i = 1; i < arr.length; i++) {
            if (arr[i - 1] <= arr[i]) {
                end = i;
                if (end - start > longestEnd - longestStart) {
                    longestStart = start;
                    longestEnd = end;
                }
            } else {
                start = i;
                end = i;
            }
        }

        int[] longestSubArray = Arrays.copyOfRange(arr, longestStart, longestEnd + 1);
        return longestSubArray;
    }
}
Output:

Enter the Length of the Array
10
Enter each value
5
6
3
5
7
8
9
1
2
3
Longest increasing subarray: [3, 5, 7, 8, 9]

Explanation :

1. The program begins by creating a Scanner object to read user input. It then prompts the user to specify the length of an integer array.

2. The program initializes an integer array called arr with the specified length. It then prompts the user to enter each element of the array.

3. The findLongestSubArray method is called with the input array arr. This method's purpose is to find the longest increasing subarray within the given array.
It returns an array containing the elements of the longest increasing subarray.

4. Inside the findLongestSubArray method, the code checks if the input array is null or empty. If it is, the method returns an array containing only -1.
This serves as a signal that there is no valid increasing subarray.

5. The method uses variables like start, end, longestStart, and longestEnd to keep track of the current subarray being examined and the longest subarray found so far.

6. It then iterates through the array starting from the second element (index 1). It checks if the current element is greater than or equal to the previous element.
If it is, it extends the current subarray. If the current subarray is longer than the previously longest one, it updates the indices of the longest subarray.

7. If the current element is not greater than or equal to the previous element, the code starts a new subarray.

8. Finally, the method uses Arrays.copyOfRange to extract the elements of the longest subarray from the original array. The longest subarray is then returned.

9. In the main method, the longest increasing subarray is printed to the console using Arrays.toString for a more readable output.

This program allows the user to input an array, and it then identifies and displays the longest increasing subarray within that array.
