/* Implement a program to filter out even numbers from a list *\

Using Java 8 Streams

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FilterEvenNumbers {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Using filter() to remove even numbers
        List<Integer> oddNumbers = numbers.stream()
                                          .filter(num -> num % 2 != 0)
                                          .collect(Collectors.toList());

        System.out.println("Odd numbers: " + oddNumbers);
    }
}
Output:
Odd numbers: [1, 3, 5, 7, 9]
------------------------------------------------------------------(Without using Java8)-------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FilterEvenNumbersTraditional {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> oddNumbers = new ArrayList<>();

        // Using a traditional for-each loop to filter out even numbers
        for (Integer number : numbers) {
            if (number % 2 != 0) {
                oddNumbers.add(number);
            }
        }

        System.out.println("Odd numbers: " + oddNumbers);
    }
}
Output:
Odd numbers: [1, 3, 5, 7, 9]

Explanation:
Using Streams: The filter() method filters elements based on the condition num % 2 != 0 (i.e., odd numbers). The filtered elements are collected into a new list.
Without Java 8: A for-each loop checks each number, and if it's odd, it is added to the new list oddNumbers.


