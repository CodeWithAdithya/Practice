/* Implement a program to filter out negative numbers from a list using streams *\

Using Streams (Java 8)

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FilterNegativeWithStreams {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(-10, 15, -20, 30, 40, -5);

        // Using streams to filter out negative numbers
        List<Integer> positiveNumbers = numbers.stream()
                                               .filter(num -> num >= 0)
                                               .collect(Collectors.toList()); // or toList() from java 16

        System.out.println("Positive numbers: " + positiveNumbers);
    }
}
Output:
Positive numbers: [15, 30, 40]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Without Java 8


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FilterNegativeWithoutStreams {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(-10, 15, -20, 30, 40, -5);
        List<Integer> positiveNumbers = new ArrayList<>();

        // Using a traditional for-each loop to filter out negative numbers
        for (Integer number : numbers) {
            if (number >= 0) {
                positiveNumbers.add(number);
            }
        }

        System.out.println("Positive numbers: " + positiveNumbers);
    }
}
Output:
Positive numbers: [15, 30, 40]


Explanation:
Using Streams: The filter() method processes each element in the stream and includes only non-negative numbers in the resulting list.
Without Java 8: A for-each loop checks each number and adds non-negative numbers to a new list manually.
