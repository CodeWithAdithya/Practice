/* Implement a program to split a list of strings by the first character using groupingBy() *\

Here’s a Java 8 program to split a list of strings by their first character using groupingBy():

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class GroupStringsByFirstCharacter {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("apple", "banana", "apricot", "cherry", "blueberry");

        // Grouping strings by their first character
        Map<Character, List<String>> groupedByFirstChar = words.stream()
                                                               .collect(Collectors.groupingBy(word -> word.charAt(0)));

        // Print the grouped map
        groupedByFirstChar.forEach((character, group) -> 
            System.out.println(character + ": " + group));
    }
}
Output:
a: [apple, apricot]
b: [banana, blueberry]
c: [cherry]

Explanation:
stream(): Converts the list of strings into a stream.
collect(Collectors.groupingBy(word -> word.charAt(0))): Groups the strings by their first character.
Map<Character, List<String>>: The result is a map where the key is the first character, and the value is a list of strings starting with that character.
forEach(): Iterates through the map and prints each key-value pair.

---------------------------------------------(without java 8)----------------------------------------------------------------------------------------------------------------------------


Here’s how you can split a list of strings by their first character without using Java 8 features:

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupStringsByFirstCharacterTraditional {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("apple", "banana", "apricot", "cherry", "blueberry");
        Map<Character, List<String>> groupedByFirstChar = new HashMap<>();

        // Group strings by their first character
        for (String word : words) {
            char firstChar = word.charAt(0);
            if (!groupedByFirstChar.containsKey(firstChar)) {
                groupedByFirstChar.put(firstChar, new java.util.ArrayList<>());
            }
            groupedByFirstChar.get(firstChar).add(word);
        }

        // Print the grouped map
        for (Map.Entry<Character, List<String>> entry : groupedByFirstChar.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}

Output:
a: [apple, apricot]
b: [banana, blueberry]
c: [cherry]

Explanation:
Use a for loop to iterate over the list of strings.
Extract the first character of each string using charAt(0).
Check if the HashMap already contains the first character as a key:
If not, initialize a new ArrayList for that character.
Add the string to the appropriate list in the map.
Finally, iterate through the map to display the grouped strings.
